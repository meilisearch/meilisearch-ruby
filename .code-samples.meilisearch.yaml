# This code-samples file is used by the MeiliSearch documentation
# Every example written here will be automatically fetched by
# the documentation on build
# You can read more on https://github.com/meilisearch/documentation/tree/master/.vuepress/code-samples
---
get_one_index_1: |-
  client.fetch_index('movies')
list_all_indexes_1: |-
  client.indexes
create_an_index_1: |-
  client.create_index('movies', primaryKey: 'movie_id')
update_an_index_1: |-
  client.index('movies').update(primaryKey: 'movie_id')
delete_an_index_1: |-
  client.delete_index('movies')
get_one_document_1: |-
  client.index('movies').document(25684)
get_documents_1: |-
  client.index('movies').documents(limit: 2)
add_or_replace_documents_1: |-
  client.index('movies').add_documents([
    {
      id: 287947,
      title: 'Shazam',
      poster: 'https://image.tmdb.org/t/p/w1280/xnopI5Xtky18MPhK40cZAGAOVeV.jpg',
      overview: 'A boy is given the ability to become an adult superhero in times of need with a single magic word.',
      release_date: '2019-03-23'
    }
  ])
add_or_update_documents_1: |-
  client.index('movies').update_documents([
    {
      id: 287947,
      title: 'Shazam ⚡️',
      genres: 'comedy'
    }
  ])
delete_all_documents_1: |-
  client.index('movies').delete_all_documents
delete_one_document_1: |-
  client.index('movies').delete_document(25684)
delete_documents_1: |-
  client.index('movies').delete_documents([23488, 153738, 437035, 363869])
search_post_1: |-
  client.index('movies').search('american ninja')
get_update_1: |-
  client.index('movies').get_update_status(1)
get_all_updates_1: |-
  client.index('movies').get_all_update_status
get_keys_1: |-
  client.keys
get_settings_1: |-
  client.index('movies').settings
update_settings_1: |-
  client.index('movies').update_settings({
    rankingRules: [
      'words',
      'typo',
      'sort',
      'proximity',
      'attribute',
      'exactness',
      'desc(release_date)',
      'rank:desc'
    ],
    distinctAttribute: 'movie_id',
    searchableAttributes: [
      'title',
      'description',
      'genre'
    ],
    displayedAttributes: [
      'title',
      'description',
      'genre',
      'release_date'
    ],
    stopWords: [
      'the',
      'a',
      'an'
    ],
    synonyms: {
      wolverine: ['xmen', 'logan'],
      logan: ['wolverine']
    }
  })
reset_settings_1: |-
  client.index('movies').reset_settings
get_synonyms_1: |-
  client.index('movies').synonyms
update_synonyms_1: |-
  client.index('movies').update_synonyms({
    wolverine: ['xmen', 'logan'],
    logan: ['wolverine', 'xmen'],
    wow: ['world of warcraft']
  })
reset_synonyms_1: |-
  client.index('movies').reset_synonyms
get_stop_words_1: |-
  client.index('movies').stop_words
update_stop_words_1: |-
  client.index('movies').update_stop_words(['of', 'the', 'to'])
reset_stop_words_1: |-
  client.index('movies').reset_stop_words
get_ranking_rules_1: |-
  client.index('movies').ranking_rules
update_ranking_rules_1: |-
  client.index('movies').update_ranking_rules([
    'words',
    'typo',
    'sort',
    'proximity',
    'attribute',
    'exactness',
    'release_date:asc',
    'rank:desc'
  ])
reset_ranking_rules_1: |-
  client.index('movies').reset_ranking_rules
get_distinct_attribute_1: |-
  client.index('movies').distinct_attribute
update_distinct_attribute_1: |-
  client.index('movies').update_distinct_attribute('movie_id')
reset_distinct_attribute_1: |-
  client.index('movies').reset_distinct_attribute
get_searchable_attributes_1: |-
  client.index('movies').searchable_attributes
update_searchable_attributes_1: |-
  client.index('movies').update_searchable_attributes([
    'title',
    'description',
    'genre'
  ])
reset_searchable_attributes_1: |-
  client.index('movies').reset_searchable_attributes
get_filterable_attributes_1: |-
  client.index('movies').filterable_attributes
update_filterable_attributes_1: |-
  client.index('movies').update_filterable_attributes([
    'genres',
    'director'
  ])
reset_filterable_attributes_1: |-
  client.index('movies').reset_filterable_attributes
get_displayed_attributes_1: |-
  client.index('movies').get_displayed_attributes
update_displayed_attributes_1: |-
  client.index('movies').update_displayed_attributes([
    'title',
    'description',
    'genre',
    'release_date'
  ])
reset_displayed_attributes_1: |-
  client.index('movies').reset_displayed_attributes
get_index_stats_1: |-
  client.index('movies').stats
get_indexes_stats_1: |-
  client.stats
get_health_1: |-
  client.health
get_version_1: |-
  client.version
distinct_attribute_guide_1: |-
  client.index('jackets').update_distinct_attribute('product_id')
field_properties_guide_searchable_1: |-
  client.index('movies').update_searchable_attributes([
    'title',
    'description',
    'genre'
  ])
field_properties_guide_displayed_1: |-
  client.index('movies').update_settings({
    displayedAttributes: [
      'title',
      'description',
      'genre',
      'release_date'
    ]
  })
filtering_guide_1: |-
  client.index('movies').search('Avengers', { filter: 'release_date > 795484800' })
filtering_guide_2: |-
  client.index('movies').search('Batman', {
    filter: 'release_date > 795484800 AND (director = "Tim Burton" OR director = "Christopher Nolan")'
  })
filtering_guide_3: |-
  client.index('movies').search('horror', { filter: 'director = "Jordan Peele"' })
filtering_guide_4: |-
  client.index('movies').search('Planet of the Apes', {
    filter: 'rating >= 3 AND (NOT director = "Tim Burton")'
  })
search_parameter_guide_query_1: |-
  client.index('movies').search('shifu')
search_parameter_guide_offset_1: |-
  client.index('movies').search('shifu', {
    offset: 1
  })
search_parameter_guide_limit_1: |-
  client.index('movies').search('shifu', {
    limit: 2
  })
search_parameter_guide_retrieve_1: |-
  client.index('movies').search('shifu', {
    attributesToRetrieve: ['overview', 'title']
  })
search_parameter_guide_crop_1: |-
  client.index('movies').search('shifu', {
    attributesToCrop: ['overview'],
    cropLength: 10
  })
search_parameter_guide_highlight_1: |-
  client.index('movies').search('winter feast', {
    attributesToHighlight: ['overview']
  })
search_parameter_guide_matches_1: |-
  client.index('movies').search('winter feast', {
    matches: true
  })
search_parameter_guide_filter_1: |-
  client.index('movies').search('n', {
    filter: 'title = Nightshift'
  })
search_parameter_guide_filter_2: |-
  client.index('movies').search('shifu', {
    filter: 'title="Kung Fu Panda"'
  })
settings_guide_synonyms_1: |-
  client.index('tops').update_settings({
    synonyms: {
      sweater: ['jumper'],
      jumper: ['sweater']
    }
  })
settings_guide_stop_words_1: |-
  client.index('movies').update_settings({
    stopWords: [
      'the',
      'a',
      'an'
    ]
  })
settings_guide_ranking_rules_1: |-
  client.index('movies').update_settings({
    rankingRules: [
      'words',
      'typo',
      'sort',
      'proximity',
      'attribute',
      'exactness',
      'release_date:asc',
      'rank:desc'
    ]
  })
settings_guide_distinct_1: |-
  client.index('jackets').update_distinct_attribute('product_id')
settings_guide_searchable_1: |-
  client.index('movies').update_settings({
    searchableAttributes: [
      'title',
      'description',
      'genre'
    ]
  })
settings_guide_displayed_1: |-
  client.index('movies').update_settings({
    displayedAttributes: [
      'title',
      'description',
      'genre',
      'release_date'
    ]
  })
add_movies_json_1: |-
  require 'json'

  movies_json = File.read('movies.json')
  movies = JSON.parse(movies_json)
  client.index('movies').add_documents(movies)
documents_guide_add_movie_1: |-
  client.index('movies').add_documents([{
    "movie_id": "123sq178",
    "title": "Amelie Poulain"
  }])
search_guide_1: |-
  client.index('movies').search('shifu', {
    limit: 5,
    offset: 10
  })
search_guide_2: |-
  client.index('movies').search('Avengers', {
    filter: 'release_date > 795484800'
  })
getting_started_add_documents_md: |-
  ```bash
  $ bundle add meilisearch
  ```

  ```ruby
  require 'json'
  require 'meilisearch'

  client = MeiliSearch::Client.new('http://127.0.0.1:7700')

  movies_json = File.read('movies.json')
  movies = JSON.parse(movies_json)

  client.index('movies').add_documents(movies)
  ```

  [About this SDK](https://www.github.com/meilisearch/meilisearch-ruby)
getting_started_search_md: |-
  ```ruby
  client.index('movies').search('botman')
  ```

  [About this SDK](https://www.github.com/meilisearch/meilisearch-ruby)
faceted_search_update_settings_1: |-
  client.index('movies').update_filterable_attributes([
    'director',
    'genres'
  ])
faceted_search_filter_1: |-
  client.index('movies').search('thriller', {
    filter: [['genres = Horror', 'genres = Mystery'], 'director = "Jordan Peele"']
  })
faceted_search_facets_distribution_1: |-
  client.index('movies').search('Batman', {
    facetsDistribution: ['genres']
  })
faceted_search_walkthrough_filterable_attributes_1: |-
  client.index('movies').update_filterable_attributes([
    'director',
    'producer',
    'genres',
    'production_companies'
  ])
faceted_search_walkthrough_filter_1: |-
  client.index('movies').search('thriller', {
    filter: [['genres = Horror', 'genres = Mystery'], 'director = "Jordan Peele"']
  })
faceted_search_walkthrough_facets_distribution_1: |-
  client.index('movies').search('Batman', {
    facetsDistribution: ['genres']
  })
post_dump_1: |-
  client.create_dump
get_dump_status_1: |-
  client.get_dump_status(20201006-053243949)
phrase_search_1: |-
  client.index('movies').search('"african american" horror')
